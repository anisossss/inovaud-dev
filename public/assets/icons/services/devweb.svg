<svg xmlns="http://www.w3.org/2000/svg" width="58.316" height="58.253" viewBox="0 0 58.316 58.253"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path id="Tracé_567" data-name="Tracé 567" d="M54.56.5H3.756A3.761,3.761,0,0,0,0,4.256v41.3a3.761,3.761,0,0,0,3.756,3.756H6.968a.853.853,0,1,0,0-1.707H3.756a2.051,2.051,0,0,1-2.049-2.049V42.314H32.8v1.471h-.677a1.68,1.68,0,0,0-1.679,1.679V47.6H12.157a.853.853,0,1,0,0,1.707h8.206v3.061H17.786a3.121,3.121,0,0,0-3.118,3.118V57.33a1.424,1.424,0,0,0,1.422,1.422H42.159a1.424,1.424,0,0,0,1.422-1.422V55.487a3.121,3.121,0,0,0-3.118-3.118H37.887V51.29H53.665a1.68,1.68,0,0,0,1.678-1.679v-.4a3.762,3.762,0,0,0,2.907-3.658l.065-41.3A3.76,3.76,0,0,0,54.56.5ZM32.152,40.282V36.191H53.637v4.091Zm2.355-5.8v-1.8H51.281v1.8Zm16.774,7.5v1.8H34.507v-1.8ZM22.07,49.308h8.376v.3a1.68,1.68,0,0,0,1.679,1.678H36.18v1.079H22.069Zm18.4,4.768a1.412,1.412,0,0,1,1.41,1.41v1.559h-25.5V55.487a1.412,1.412,0,0,1,1.411-1.41Zm13.172-4.493H32.152V45.492H53.637Zm2.907-4.031a2.05,2.05,0,0,1-1.2,1.862V45.463a1.68,1.68,0,0,0-1.679-1.678h-.677V42.314h3.555Zm0-4.944H55.316c.017-.1.028-4.445.028-4.445a1.681,1.681,0,0,0-1.679-1.679h-.677v-1.8h.677a1.681,1.681,0,0,0,1.679-1.679V26.862a1.681,1.681,0,0,0-1.679-1.679H48.845a.854.854,0,0,0,0,1.707h4.792v4.091H32.152V26.89H43.534a.854.854,0,0,0,0-1.707H32.124a1.681,1.681,0,0,0-1.679,1.679V31.01a1.681,1.681,0,0,0,1.679,1.679H32.8v1.8h-.677a1.681,1.681,0,0,0-1.679,1.679s.011,4.348.028,4.445H1.706v-28.5H56.544Zm0-30.205H1.769V4.256A2.051,2.051,0,0,1,3.819,2.207H54.495a2.051,2.051,0,0,1,2.049,2.049Zm0,0" transform="translate(0 -0.5)" fill="#fff"/>
</svg>