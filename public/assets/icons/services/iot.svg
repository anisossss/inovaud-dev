<svg xmlns="http://www.w3.org/2000/svg" width="63.528" height="45.354" viewBox="0 0 63.528 45.354"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="iot" transform="translate(0 -0.5)">
    <path id="Tracé_1789" data-name="Tracé 1789" d="M150.795,55.94a1.238,1.238,0,0,1-.878-.364,14.239,14.239,0,0,0-20.115,0,1.241,1.241,0,1,1-1.755-1.755,16.724,16.724,0,0,1,23.625,0,1.241,1.241,0,0,1-.877,2.118Zm0,0" transform="translate(-111.841 -42.426)" fill="#fff"/>
    <path id="Tracé_1790" data-name="Tracé 1790" d="M339.242,53.49a1.237,1.237,0,0,1-.881-.367l-.015-.015a1.241,1.241,0,1,1,1.747-1.762l.03.029a1.241,1.241,0,0,1-.881,2.115Zm0,0" transform="translate(-296.042 -44.221)" fill="#fff"/>
    <path id="Tracé_1791" data-name="Tracé 1791" d="M94.71,9.268a1.241,1.241,0,0,1-.877-2.118A22.468,22.468,0,0,1,107.342.641a22.819,22.819,0,0,1,14.391,3.183,1.241,1.241,0,1,1-1.3,2.117A20.16,20.16,0,0,0,95.587,8.9a1.236,1.236,0,0,1-.877.364Zm0,0" transform="translate(-81.871 0)" fill="#fff"/>
    <path id="Tracé_1792" data-name="Tracé 1792" d="M139.86,268.14a16.651,16.651,0,0,1-11.812-4.885A1.241,1.241,0,1,1,129.8,261.5a14.239,14.239,0,0,0,20.115,0,1.241,1.241,0,1,1,1.755,1.755,16.652,16.652,0,0,1-11.813,4.885Zm0,0" transform="translate(-111.841 -228.297)" fill="#fff"/>
    <path id="Tracé_1793" data-name="Tracé 1793" d="M133.671,304.12a22.756,22.756,0,0,1-12.513-3.742,1.241,1.241,0,0,1,1.368-2.071,20.287,20.287,0,0,0,25.433-2.592,1.241,1.241,0,0,1,1.755,1.755,22.744,22.744,0,0,1-13.882,6.548c-.72.068-1.441.1-2.161.1Zm0,0" transform="translate(-105.638 -258.266)" fill="#fff"/>
    <path id="Tracé_1794" data-name="Tracé 1794" d="M94.753,297.877a1.237,1.237,0,0,1-.872-.358l-.052-.052a1.241,1.241,0,1,1,1.762-1.747l.033.033a1.241,1.241,0,0,1-.871,2.124Zm0,0" transform="translate(-81.872 -258.267)" fill="#fff"/>
    <path id="Tracé_1795" data-name="Tracé 1795" d="M193.3,155.473a4.586,4.586,0,1,1,4.586-4.586A4.591,4.591,0,0,1,193.3,155.473Zm0-6.69a2.1,2.1,0,1,0,2.1,2.1A2.107,2.107,0,0,0,193.3,148.783Zm0,0" transform="translate(-165.296 -127.71)" fill="#fff"/>
    <path id="Tracé_1796" data-name="Tracé 1796" d="M4.586,109.669A4.591,4.591,0,0,1,0,105.083V89.965a4.586,4.586,0,1,1,9.172,0v15.118A4.591,4.591,0,0,1,4.586,109.669Zm0-21.808a2.107,2.107,0,0,0-2.1,2.1v15.118a2.1,2.1,0,0,0,4.208,0V89.965A2.107,2.107,0,0,0,4.586,87.861Zm0,0" transform="translate(0 -74.347)" fill="#fff"/>
    <path id="Tracé_1797" data-name="Tracé 1797" d="M369.969,110.3a4.033,4.033,0,0,1-4.029-4.028V94.154H364.6a4.028,4.028,0,1,1,0-8.056h10.732a4.028,4.028,0,0,1,0,8.056H374V106.27A4.033,4.033,0,0,1,369.969,110.3ZM364.6,88.58a1.547,1.547,0,1,0,0,3.093h2.579a1.241,1.241,0,0,1,1.241,1.241V106.27a1.547,1.547,0,0,0,3.094,0V92.914a1.241,1.241,0,0,1,1.241-1.241h2.578a1.547,1.547,0,1,0,0-3.093Zm0,0" transform="translate(-315.834 -74.977)" fill="#fff"/>
    <path id="Tracé_1798" data-name="Tracé 1798" d="M150.794,118.987A10.607,10.607,0,1,1,161.4,108.38,10.619,10.619,0,0,1,150.794,118.987Zm0-18.732a8.125,8.125,0,1,0,8.125,8.125A8.134,8.134,0,0,0,150.794,100.255Zm0,0" transform="translate(-122.793 -85.203)" fill="#fff"/>
  </g>
</svg>