<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Groupe_108" data-name="Groupe 108" transform="translate(-184.341 -2623)">
    <circle id="Ellipse_170" data-name="Ellipse 170" cx="24" cy="24" r="24" transform="translate(184.341 2623)" fill="#3c8a2e"/>
    <g id="code-optimisation" transform="translate(188.021 2629.453)">
      <g id="Groupe_109" data-name="Groupe 109" transform="translate(6.723 4.007)">
        <path id="Tracé_711" data-name="Tracé 711" d="M21.791,35.28h-.564a2.184,2.184,0,0,1-2.087-1.523l-.451-1.072a1.1,1.1,0,0,0-.677-.677c-.451-.169-.846-.338-1.241-.508a1.077,1.077,0,0,0-1.015,0l-1.128.564a1.854,1.854,0,0,1-.959.226,2.259,2.259,0,0,1-1.636-.677l-.395-.395a2.246,2.246,0,0,1-.451-2.539l.564-1.128a.969.969,0,0,0,0-.959l-.169-.338a9.633,9.633,0,0,1-.395-1.015.914.914,0,0,0-.677-.621l-1.185-.395A2.238,2.238,0,0,1,7.8,22.135v-.564a2.184,2.184,0,0,1,1.523-2.087l1.185-.395c.395-.113.564-.508.677-.677.169-.451.338-.846.508-1.241a1.079,1.079,0,0,0,0-1.015l-.564-1.128a2.183,2.183,0,0,1,.451-2.6l.395-.395a2.346,2.346,0,0,1,2.539-.451l1.128.564a.969.969,0,0,0,.959,0,6.9,6.9,0,0,1,1.354-.564.914.914,0,0,0,.621-.677l.395-1.185A2.238,2.238,0,0,1,21.058,8.2h.564a2.184,2.184,0,0,1,2.087,1.523l.395,1.185a1.122,1.122,0,0,0,.677.677c.451.169.846.338,1.241.508a1.073,1.073,0,0,0,1.015,0l1.128-.564a1.854,1.854,0,0,1,.959-.226,2.259,2.259,0,0,1,1.636.677l.395.395a2.246,2.246,0,0,1,.451,2.539l-.564,1.128a.969.969,0,0,0,0,.959l.169.338a9.635,9.635,0,0,1,.395,1.015.914.914,0,0,0,.677.621l1.185.395a2.238,2.238,0,0,1,1.523,2.087v.564a2.184,2.184,0,0,1-1.523,2.087l-1.128.282a1.107,1.107,0,0,0-.677.733c-.169.451-.338.9-.508,1.3a1.079,1.079,0,0,0,0,1.015l.564,1.128a2.183,2.183,0,0,1-.451,2.6l-.395.395a2.346,2.346,0,0,1-2.539.451l-1.128-.564a.969.969,0,0,0-.959,0c-.451.169-.846.338-1.3.508a1.1,1.1,0,0,0-.677.677l-.395,1.185a2.208,2.208,0,0,1-2.087,1.467ZM16.206,30.2a1.854,1.854,0,0,1,.959.226,12.423,12.423,0,0,0,1.185.508A2.154,2.154,0,0,1,19.7,32.29l.451,1.072a1.084,1.084,0,0,0,1.072.79h.564a1.25,1.25,0,0,0,1.072-.733l.395-1.185a2.151,2.151,0,0,1,1.354-1.354c.451-.169.79-.338,1.185-.508a2.28,2.28,0,0,1,1.918,0l1.128.564a1.063,1.063,0,0,0,.451.113,1.024,1.024,0,0,0,.79-.338l.395-.395a1.044,1.044,0,0,0,.226-1.241l-.564-1.128a2.409,2.409,0,0,1,0-1.975,12.424,12.424,0,0,0,.508-1.185,2.2,2.2,0,0,1,1.41-1.41l1.128-.282a1.106,1.106,0,0,0,.733-1.015v-.564a1.25,1.25,0,0,0-.733-1.072L32,20.047a2.151,2.151,0,0,1-1.354-1.354,5.3,5.3,0,0,0-.338-.846l-.169-.338a2.28,2.28,0,0,1,0-1.918l.564-1.128a1.118,1.118,0,0,0-.226-1.241l-.395-.395a1.057,1.057,0,0,0-1.241-.226l-1.128.564a2.409,2.409,0,0,1-1.975,0,12.423,12.423,0,0,0-1.185-.508A2.154,2.154,0,0,1,23.2,11.3l-.395-1.185a1.1,1.1,0,0,0-1.072-.733h-.564a1.25,1.25,0,0,0-1.072.733L19.7,11.3a2.151,2.151,0,0,1-1.354,1.354,3.939,3.939,0,0,0-1.128.451,2.044,2.044,0,0,1-1.975,0l-1.128-.564a1.063,1.063,0,0,0-.451-.113,1.024,1.024,0,0,0-.79.338l-.451.338a1.044,1.044,0,0,0-.226,1.241l.564,1.128a2.409,2.409,0,0,1,0,1.975,12.423,12.423,0,0,0-.508,1.185A2.154,2.154,0,0,1,10.9,19.991l-1.185.395a1.1,1.1,0,0,0-.733,1.072v.564a1.25,1.25,0,0,0,.733,1.072l1.185.395a2.151,2.151,0,0,1,1.354,1.354,5.3,5.3,0,0,0,.338.846l.169.338a2.28,2.28,0,0,1,0,1.918L12.2,29.074a1.118,1.118,0,0,0,.226,1.241l.395.395a1.057,1.057,0,0,0,1.241.226l1.128-.564a3.2,3.2,0,0,1,1.015-.169Z" transform="translate(-7.8 -8.2)" fill="#fff"/>
      </g>
      <g id="Groupe_110" data-name="Groupe 110" transform="translate(18.879 12.835)">
        <path id="Tracé_712" data-name="Tracé 712" d="M29.885,33.073h-.113a.535.535,0,0,1-.395-.677L31.3,24.272a.554.554,0,1,1,1.072.282l-1.918,8.124A.56.56,0,0,1,29.885,33.073Z" transform="translate(-29.347 -23.847)" fill="#fff"/>
      </g>
      <g id="Groupe_113" data-name="Groupe 113" transform="translate(12.929 14.292)">
        <g id="Groupe_111" data-name="Groupe 111" transform="translate(9.89)">
          <path id="Tracé_713" data-name="Tracé 713" d="M36.878,32.619a.5.5,0,0,1-.451-.282.555.555,0,0,1,.169-.79l3.159-2.031L36.6,27.486a.571.571,0,0,1,.621-.959l3.893,2.482a.575.575,0,0,1,.282.451.5.5,0,0,1-.282.451l-3.893,2.482A.408.408,0,0,1,36.878,32.619Z" transform="translate(-36.331 -26.431)" fill="#fff"/>
        </g>
        <g id="Groupe_112" data-name="Groupe 112" transform="translate(0 0.113)">
          <path id="Tracé_714" data-name="Tracé 714" d="M23.2,32.707a.431.431,0,0,1-.282-.113l-3.836-2.482a.575.575,0,0,1-.282-.451.5.5,0,0,1,.282-.451l3.836-2.482a.571.571,0,1,1,.621.959L20.38,29.66l3.1,2.031a.555.555,0,0,1,.169.79A.7.7,0,0,1,23.2,32.707Z" transform="translate(-18.8 -26.631)" fill="#fff"/>
        </g>
      </g>
    </g>
  </g>
</svg>